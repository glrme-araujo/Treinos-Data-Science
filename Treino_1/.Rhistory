type = "class")
dataset$predicao <- predict(modelo_especies,
newdata = dataset,
type = "class")
#Visualizando a nova base de dados dataset com a variável 'predicao'
dataset %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size =12)
attach(dataset)
#Criando uma tabela para comparar as ocorrências reais com as predições
EGM <- as.data.frame.matrix(table(predicao, Species))
#Visualizando a tabela EGM
EGM %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Eficiência global do modelo
acuracia <- (round((sum(diag(table(Species, predicao))) /
sum(table(Species, predicao))), 2))
acuracia
View(dataset)
rho <- cor(dataset[,2:5])
## Plotando Grafico de Calor das Correções
rho %>%
melt() %>%
rename(Correlação = value) %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = Correlação)) +
geom_text(aes(x = Var1, y = Var2, label = format(Correlação, digits = 2)),
size = 3) +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown",
midpoint = 0) +
labs(x = NULL, y = NULL) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
# Teste da adequabilidade dos dados para PCA (Teste de esfericidade de Bartlett)
cortest.bartlett(dataset[,2:5])
fatorial <- principal(dataset[,2:5],
nfactors = length(dataset[,2:5]),
rotate = "none",
scores = TRUE)
fatorial
# Eigenvalues (autovalores)
eigenvalues <- round(fatorial$values, 5)
eigenvalues
# Identificação da variância compartilhada em cada fator
variancia_compartilhada <- as.data.frame(fatorial$Vaccounted) %>%
slice(1:3)
rownames(variancia_compartilhada) <- c("Autovalores",
"Prop. da Variância",
"Prop. da Variância Acumulada")
rownames(variancia_compartilhada) <- c("Autovalores",
"Prop. da Variância",
"Prop. da Variância Acumulada")
# Variância compartilhada pelas variáveis originais para a formação de cada fator
round(variancia_compartilhada, 3) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Cálculo dos scores fatoriais
scores_fatoriais <- as.data.frame(fatorial$weights)
# Visualização dos scores fatoriais
round(scores_fatoriais, 3) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Cálculo dos fatores propriamente ditos
fatores <- as.data.frame(fatorial$scores)
View(fatores)
# Cálculo das cargas fatoriais
cargas_fatoriais <- as.data.frame(unclass(fatorial$loadings))
# Visualização das cargas fatoriais - Correlações entre fator e variavel orig.
round(cargas_fatoriais, 3) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Cálculo das comunalidades
comunalidades <- as.data.frame(unclass(fatorial$communality)) %>%
rename(comunalidades = 1)
View(cargas_fatoriais)
eigenvalues
# Definição da quantidade de fatores com eigenvalues maiores que 1
k <- sum(eigenvalues > 1)
print(k)
fatorial2 <- principal(dataset[,2:5],
nfactors = 2,
rotate = "none",
scores = TRUE)
fatorial2
# Cálculo das comunalidades com apenas os 'k' ('k' = 2) primeiros fatores
comunalidades2 <- as.data.frame(unclass(fatorial2$communality)) %>%
rename(comunalidades = 1)
# Visualização das comunalidades com apenas os 'k' ('k' = 2) primeiros fatores
round(comunalidades2, 3) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 20)
# Loading plot com as cargas dos 'k' ('k' = 2) primeiros fatores
cargas_fatoriais[, 1:2] %>%
data.frame() %>%
rownames_to_column("variáveis") %>%
ggplot(aes(x = PC1, y = PC2, label = variáveis)) +
geom_point(color = "darkorchid",
size = 3) +
geom_text_repel() +
geom_vline(aes(xintercept = 0), linetype = "dashed", color = "orange") +
geom_hline(aes(yintercept = 0), linetype = "dashed", color = "orange") +
expand_limits(x= c(-1.25, 0.25), y=c(-0.25, 1)) +
theme_bw()
b
# Adicionando os fatores extraídos no banco de dados original
dataset <- bind_cols(dataset,
"fator1" = fatores$PC1,
"fator2" = fatores$PC2)
dataset$ranking <- fatores$PC1 * variancia_compartilhada$PC1[2] +
fatores$PC2 * variancia_compartilhada$PC2[2]
# Visualizando o ranking final
dataset %>%
arrange(desc(ranking)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 12)
dataset_comparacao <- dataset
dataset_comparacao$Species <- relevel(dataset_comparacao$Species,
ref = "Iris-virginica")
modelo_especies_comp <- multinom(formula = Species ~ fator1 + fator2 ,
data = dataset_comparacao)
stargazer(modelo_especies_comp, nobs=T, type="text")
#LL do modelo_especies
logLik(modelo_especies_comp)
dataset_comparacao$predicao <- predict(modelo_especies_comp,
newdata = dataset_comparacao,
type = "class")
#Visualizando a nova base de dados dataset com a variável 'predicao'
dataset_comparacao %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size =12)
attach(dataset_comparacao)
#Criando uma tabela para comparar as ocorrências reais com as predições
EGM_comp <- as.data.frame.matrix(table(predicao, Species))
#Visualizando a tabela EGM
EGM_comp %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Eficiência global do modelo
acuracia <- (round((sum(diag(table(Species, predicao))) /
sum(table(Species, predicao))), 2))
acuracia
pacotes <- c("ggplot2",
"plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"psych", # elaboração da fatorial e estatística
"PerformanceAnalytics",# função 'chart.Correlation' para plotagem
'Hmisc', # matriz de correlações com p-valor
'nnet', #
'stargazer',
'reshape2',
'fmsb')
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
dataset <- read.csv("Iris.csv",
sep =',',
dec = '.')
summary(dataset)
dataset$Species <- as.factor(dataset$Species)
summary(dataset)
head(dataset) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 16)
# Plotar quantidade de amostras por especie
ggplot(data= dataset) +
geom_bar(mapping = aes(x = Species,fill=Species))+
labs( y= "Quantidade", x = "Especies")
Iris_setosa     <- filter(dataset,Species =='Iris-setosa')
Iris_versicolor <- filter(dataset,Species =='Iris-versicolor')
Iris_virginica  <- filter(dataset,Species =='Iris-virginica')
valores_medios <- data.frame(
row.names = c("Iris-setosa","Iris-versicolor","Iris-virginica"),
SepalLengthCm = c(mean(Iris_setosa$SepalLengthCm),
mean(Iris_versicolor$SepalLengthCm),
mean(Iris_virginica$SepalLengthCm)),
SepalWidthCm = c(mean(Iris_setosa$SepalWidthCm),
mean(Iris_versicolor$SepalWidthCm),
mean(Iris_virginica$SepalWidthCm)),
PetalLengthCm = c(mean(Iris_setosa$PetalLengthCm),
mean(Iris_versicolor$PetalLengthCm),
mean(Iris_virginica$PetalLengthCm)),
PetalWidthCm = c(mean(Iris_setosa$PetalWidthCm),
mean(Iris_versicolor$PetalWidthCm),
mean(Iris_virginica$PetalWidthCm))
)
valores_medios %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 16)
dataset$Species.Values
dataset$Species
dataset$Species.levels
dataset$Species.Levels
dataset$Species
levels(dataset$Species)
teste <- filter(dataset,levels(dataset$Species))
levels(dataset$Species)
teste[0] <- filter(dataset,levels(dataset$Species))
pacotes <- c("ggplot2",
"plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"psych", # elaboração da fatorial e estatística
"PerformanceAnalytics",# função 'chart.Correlation' para plotagem
'Hmisc', # matriz de correlações com p-valor
'nnet', #
'stargazer',
'reshape2',
'fmsb')
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
dataset <- read.csv("Iris.csv",
sep =',',
dec = '.')
summary(dataset)
dataset$Species <- as.factor(dataset$Species)
head(dataset) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 16)
# Plotar quantidade de amostras por especie
ggplot(data= dataset) +
geom_bar(mapping = aes(x = Species,fill=Species))+
labs( y= "Quantidade", x = "Especies")
Iris_setosa     <- filter(dataset,Species =='Iris-setosa')
Iris_versicolor <- filter(dataset,Species =='Iris-versicolor')
Iris_virginica  <- filter(dataset,Species =='Iris-virginica')
valores_medios <- data.frame(
row.names = c("Iris-setosa","Iris-versicolor","Iris-virginica"),
SepalLengthCm = c(mean(Iris_setosa$SepalLengthCm),
mean(Iris_versicolor$SepalLengthCm),
mean(Iris_virginica$SepalLengthCm)),
SepalWidthCm = c(mean(Iris_setosa$SepalWidthCm),
mean(Iris_versicolor$SepalWidthCm),
mean(Iris_virginica$SepalWidthCm)),
PetalLengthCm = c(mean(Iris_setosa$PetalLengthCm),
mean(Iris_versicolor$PetalLengthCm),
mean(Iris_virginica$PetalLengthCm)),
PetalWidthCm = c(mean(Iris_setosa$PetalWidthCm),
mean(Iris_versicolor$PetalWidthCm),
mean(Iris_virginica$PetalWidthCm))
)
valores_medios %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 16)
## Mudar Nome das variáveis
nomes <- c("Compri. Sépala","Larg. Sépala","Compri. Pétala","Larg. Pétala")
rem(nomes)
remove(nomes)
## Mudar Nome das variáveis
dataset <- rename(dataset,
SepalLengthCm = "Compri. Sépala",
SepalWidthCm  = "Larg. Sépala",
PetalLengthCm = "Compri. Pétala",
PetalWidthCm  = "Larg. Pétala")
View(dataset)
## Mudar Nome das variáveis
dataset <- rename(dataset,
Compri. Spala = 'SepalLengthCm',
dataset
View(dataset)
View(dataset)
dataset <- rename(dataset,
SepalLengthCm = "Compri. Sépala",
SepalWidthCm  = "Larg. Sépala",
PetalLengthCm = "Compri. Pétala",
PetalWidthCm  = "Larg. Pétala")
dataset <- rename(dataset,
SepalLengthCm = "Cx")
names(dataset)
dataset <- rename(dataset,SepalLengthC='coisa')
dataset2 <- rename(dataset,SepalLengthC='coisa')
dataset2 <- rename(dataset,SepalLengthCm='coisa')
View(dataset)
dataset2 <- rename(dataset,coisa='SepalLengthCm')
dataset <- rename(dataset,coisa='SepalLengthCm')
dataset <- rename(dataset,coisa='SepalLengthCm')
dataset <- rename(dataset,coisaaaa='coisa')
View(dataset)
dataset <- rename(dataset,dddaa='coisaaaa')
View(dataset)
pacotes <- c("ggplot2",
"plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"psych", # elaboração da fatorial e estatística
"PerformanceAnalytics",# função 'chart.Correlation' para plotagem
'Hmisc', # matriz de correlações com p-valor
'nnet', #
'stargazer',
'reshape2',
'fmsb')
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
dataset <- read.csv("Iris.csv",
sep =',',
dec = '.')
View(dataset)
summary(dataset)
dataset$Species <- as.factor(dataset$Species)
novos_nomes <- c("Observações",
"Compr. Sépala",
"Larg. Sépala",
"Compr. Pétala",
"Larg. Pétala")
names(dataset) <- novos_names
names(dataset) <- novos_nomes
novos_nomes <- c("Observações",
"Compr. Sépala",
"Larg. Sépala",
"Compr. Pétala",
"Larg. Pétala",
"Espécie")
names(dataset) <- novos_nomes
View(dataset)
head(dataset) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 16)
novos_nomes <- c("Observações",
"Compr. Sépala(cm)",
"Larg. Sépala(cm)",
"Compr. Pétala(cm)",
"Larg. Pétala(cm)",
"Espécie")
names(dataset) <- novos_nomes
head(dataset) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 16)
# Plotar quantidade de amostras por especie
ggplot(data= dataset) +
geom_bar(mapping = aes(x = Species,fill=Species))+
labs( y= "Quantidade", x = "Especies")
# Plotar quantidade de amostras por especie
ggplot(data= dataset) +
geom_bar(mapping = aes(x = Species,fill=Species))+
labs( y= "Quantidade", x = "Especies")
# Plotar quantidade de amostras por especie
ggplot(data= dataset) +
geom_bar(mapping = aes(x = Espécie,fill=Espécie))+
labs( y= "Quantidade", x = "Especies")
# Plotar quantidade de amostras por especie
ggplot(data= dataset) +
geom_bar(mapping = aes(x = Espécie,fill=Espécie))+
labs( y= "Quantidade", x = "Especie")
View(dataset)
head(dataset) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 16)
pacotes <- c("ggplot2",
"plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"psych", # elaboração da fatorial e estatística
"PerformanceAnalytics",# função 'chart.Correlation' para plotagem
'Hmisc', # matriz de correlações com p-valor
'nnet', #
'stargazer',
'reshape2',
'fmsb')
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
dataset <- read.csv("Iris.csv",
sep =',',
dec = '.')
summary(dataset)
dataset$Species <- as.factor(dataset$Species)
head(dataset) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 16)
novos_nomes <- c("Observações",
"Compr. Sépala(cm)",
"Larg. Sépala(cm)",
"Compr. Pétala(cm)",
"Larg. Pétala(cm)",
"Espécie")
names(dataset) <- novos_nomes
View(dataset)
head(dataset) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 16)
head(dataset,n =2) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = FALSE,
font_size = 16)
# Plotar quantidade de amostras por especie
ggplot(data= dataset) +
geom_bar(mapping = aes(x = Espécie,fill=Espécie))+
labs( y= "Quantidade", x = "Especie")
grupo <- group_by(dataset,espécies)
grupo <- group_by(dataset,Espécie)
View(grupo)
Iris_setosa     <- filter(dataset,Species =='Iris-setosa')
Iris_versicolor <- filter(dataset,Species =='Iris-versicolor')
Iris_virginica  <- filter(dataset,Species =='Iris-virginica')
Iris_setosa     <- filter(dataset,Species =='Iris-setosa')
Iris_versicolor <- filter(dataset,Species =='Iris-versicolor')
Iris_virginica  <- filter(dataset,Species =='Iris-virginica')
Iris_setosa     <- filter(dataset,Espécie =='Iris-setosa')
Iris_versicolor <- filter(dataset,Espécie =='Iris-versicolor')
Iris_virginica  <- filter(dataset,Espécie =='Iris-virginica')
View(Iris_setosa)
View(grupo)
descritivas_setosa <- summarise(Iris_setosa,
observações =n()
) n(Iris_setosa)
descritivas_setosa <- summarise(Iris_setosa,
observações =n()
) n(Iris_setosa)
descritivas_setosa <- summarise(Iris_setosa,
observações =n()
) n()
descritivas_setosa <- summarise(Iris_setosa,
observações =n()
) n(Iris_setosa)
n(Iris_setosa)
n(Iris_setosa)
descritivas_setosa <- summarise(Iris_setosa,
observações =n(),
média = mean(tempo),
mediana = median(tempo),
mínimo = min(tempo),
máximo = max(tempo),
)
View(Iris_setosa)
Iris_setosa     <- filter(dataset,Espécie =='Iris-setosa',Preserve=TRUE)
View(Iris_setosa)
View(Iris_setosa)
Iris_setosa     <- filter(dataset,Espécie =='Iris-setosa',Preserve=FALSE)
View(Iris_setosa)
Iris_setosa     <- filter(dataset,Espécie =='Iris-setosa')
Iris_setosa <- select(Iris_setosa, -Espécie)
View(Iris_setosa)
Iris_versicolor <- select(Iris_versicolor, -Espécie)
Iris_virginica <- select(Iris_virginica, -Espécie)
View(Iris_setosa)
View(Iris_setosa)
